View(question_1)
colnames(question_1)[1] <- "jour"
colnames(question_1)[2] <- "hosp"
colnames(question_1)[3] <- "rea"
ggplot(data = c) + geom_line(aes(x = as.Date(c$Group.1), y = c$x.x) , col = "red") + geom_line(aes(x = as.Date(c$Group.1), y = c$x.y), col = "blue") + labs(title="Personnes hospitalisées et en réanimation selon la date",x ="Date", y = "Nombre de personnes", caption = "La courbe en rouge représente les personnes hospitalisées, et la courbe en bleu représente les personnes en réanimation") + geom_vline(xintercept = as.Date("2020-03-18")) + geom_vline(xintercept = as.Date("2020-05-11")) + geom_vline(xintercept = as.Date("2020-10-30"))+ geom_vline(xintercept = as.Date("2020-03-18"))+ geom_vline(xintercept = as.Date("2020-12-15"))
ggplot(data = question_1) + geom_line(aes(x = as.Date(question_1$jour), y = question_1$hosp) , col = "red") + geom_line(aes(x = as.Date(question_1$jour), y = question_1$rea), col = "blue") + labs(title="Personnes hospitalisées et en réanimation selon la date",x ="Date", y = "Nombre de personnes", caption = "La courbe en rouge représente les personnes hospitalisées, et la courbe en bleu représente les personnes en réanimation") + geom_vline(xintercept = as.Date("2020-03-18")) + geom_vline(xintercept = as.Date("2020-05-11")) + geom_vline(xintercept = as.Date("2020-10-30"))+ geom_vline(xintercept = as.Date("2020-03-18"))+ geom_vline(xintercept = as.Date("2020-12-15"))
which.max(question_1$hosp)
#le maximum global correspond à la ligne 244
question_1[244,]
#le pic de la 1e vague est le maximum local des 100 premiers jours
q1_bis = question_1[1:100,]
which.max(q1_bis$hosp)
#il correspond à la ligne 28
q1_bis[28,]
ggplot(data = question_1) + geom_line(aes(x = as.Date(question_1$jour), y = question_1$hosp) , col = "red") + geom_line(aes(x = as.Date(question_1$jour), y = question_1$rea), col = "blue") + labs(title="Personnes hospitalisées et en réanimation selon la date",x ="Date", y = "Nombre de personnes", caption = "La courbe en rouge représente les personnes hospitalisées, et la courbe en bleu représente les personnes en réanimation") + geom_vline(xintercept = as.Date("2020-03-18")) + geom_vline(xintercept = as.Date("2020-05-11")) + geom_vline(xintercept = as.Date("2020-10-30"))+ geom_vline(xintercept = as.Date("2020-03-18"))+ geom_vline(xintercept = as.Date("2020-12-15"))+ geom_vline(xintercept = as.Date("2020-11-16"), col = "red") + geom_vline(xintercept = as.Date("2020-04-14"), col = "red")
question_1[,4] <- (question_1$rea / question_1$hosp) * 100
question_1[28,4]
question_1[244,4]
vague1 <- subset(age, age$jour == "2020-04-14")
vague1 <- aggregate(vague1$hosp,by=list(vague1$cl_age90), FUN=sum)
View(vague1)
vague1 <- vague1[-1,] #c'est le total
vague1$Group.1 <- factor(vague1$Group.1)
vague2 <- subset(age, age$jour == "2020-11-16")
vague2 <- aggregate(vague2$hosp,by=list(vague2$cl_age90), FUN=sum)
vague2 <- vague2[-1,]
classe_age <- merge(vague1, vague2, by = "Group.1")
View(classe_age)
colnames(classe_age)[0] <- "classe"
colnames(classe_age)[1] <- "pic 1"
colnames(classe_age)[0] <- "pic 2"
colnames(classe_age)[1] <- "classe"
colnames(classe_age)[2] <- "pic 1"
colnames(classe_age)[3] <- "pic 2"
classe_age <- classe_age[order(classe_age[,1]), ]
#on représente ces résultats graphiquement
ggplot(classe_age) + geom_bar(aes(x=classe_age$classe, y = classe_age$`pic 1`), alpha = 0.2, fill = "blue", stat = "identity") + geom_bar(aes(x=classe_age$classe, y = classe_age$`pic 2`), alpha = 0.2, fill = "red", stat = "identity") + labs(title="Personnes hospitalisées selon la classe d'âge",x ="Classe d'âge", y = "Nombre de personnes", caption = "L'histogramme bleu représente les personnes hospitalisées lors du pic de la première vague et l'histogramme rouge les personnes hospitalisées lors du pic de la deuxième vague")
vague1 <- subset(age, age$jour == "2020-04-14")
vague1 <- subset(age, age$jour == "2020-04-14")
vague1 <- aggregate(vague1$rea,by=list(vague1$cl_age90), FUN=sum)
vague1 <- vague1[-1,] #c'est le total
vague1$Group.1 <- factor(vague1$Group.1)
vague2 <- subset(age, age$jour == "2020-11-16")
vague2 <- aggregate(vague2$rea,by=list(vague2$cl_age90), FUN=sum)
vague2 <- vague2[-1,]
#on fait de même avec les réanimations
v1 <- subset(age, age$jour == "2020-04-14")
v1 <- aggregate(v1$rea,by=list(v1$cl_age90), FUN=sum)
v1 <- v1[-1,] #c'est le total
v1$Group.1 <- factor(v1$Group.1)
v2 <- subset(age, age$jour == "2020-11-16")
v2 <- aggregate(v2$rea,by=list(v2$cl_age90), FUN=sum)
v2 <- v2[-1,]
v2$Group.1 <- factor(v2$Group.1)
rea_age <- merge(v1, v2, by = "Group.1")
colnames(rea_age)[1] <- "classe"
colnames(rea_age)[2] <- "pic 1"
colnames(rea_age)[3] <- "pic 2"
rea_age <- rea_age[order(rea_age[,1]), ]
View(rea_age)
#on représente ces résultats graphiquement
ggplot(rea_age) + geom_bar(aes(x=rea_age$classe, y = rea_age$`pic 1`), alpha = 0.2, fill = "blue", stat = "identity") + geom_bar(aes(x=classe_age$classe, y = rea_age$`pic 2`), alpha = 0.2, fill = "red", stat = "identity") + labs(title="Personnes hospitalisées selon la classe d'âge",x ="Classe d'âge", y = "Nombre de personnes", caption = "L'histogramme bleu représente les personnes hospitalisées lors du pic de la première vague et l'histogramme rouge les personnes hospitalisées lors du pic de la deuxième vague")
View(rea)
View(rea)
q3_1 <- subset(rea, jour == "2020-04-14")
q3_2 <- subset(rea, jour == "2020-11-16")
View(q3_1)
#
#
q3_1 <- subset(hospitalisation, jour == "2020-04-14")
q3_1 <- aggregate(q3_1$hosp,by=list(q3_1$dep), FUN=sum)
q3_1 <- subset(hospitalisation, jour == "2020-04-14")
q3_2 <- subset(hospitalisation, jour == "2020-11-16")
q3 <- merge(q3_1,q3_2, by = "Group.1")
View(q3_1)
q3 <- merge(q3_1,q3_2, by = "dep")
View(q3_1)
View(q3)
colnames(q3)[3] <- "pic1"
colnames(q3)[10] <- "pic2"
colnames(q3)[4] <- "hosp_pic1"
colnames(q3)[11] <- "hosp_pic2"
View(question_1)
View(hosp)
View(hosp)
View(hospitalisation)
View(q3)
Grand_Est <- factor(c("08","10","51","52" , "54","55" ,"57","67","68","88"))
for (i in 1:101){
if (is.element(q3[i,1],Grand_Est) == TRUE) {q3[i,15] <- "Grand-Est"}
}
Bourgogne_Franche_Comté <- factor(c("21","25","39","58" , "70","71" ,"89","90"))
for (i in 1:101){
if (is.element(q3[i,1],Bourgogne_Franche_Comté) == TRUE) {q3[i,15] <- "Bourgogne_Franche_Comté"}
}
Auvergne_Rhône_Alpes <- factor(c("01","03","07","15","26","38","42","43","63","69","73","74"))
for (i in 1:101){
if (is.element(q3[i,1],Auvergne_Rhône_Alpes) == TRUE) {q3[i,15] <- "Auvergne_Rhône_Alpes"}
}
PACA <- factor(c("04","05","06","13" , "83","84"))
for (i in 1:101){
if (is.element(q3[i,1],PACA) == TRUE) {q3[i,15] <- "PACA"}
}
Bretagne <- factor(c("22","29","35","56"))
for (i in 1:101){
if (is.element(q3[i,1],Bretagne) == TRUE) {q3[i,15] <- "Bretagne"}
}
Centre_Val_Loire <- factor(c("18","28","36","37" , "41","45"))
for (i in 1:101){
if (is.element(q3[i,1],Centre_Val_Loire) == TRUE) {q3[i,15] <- "Centre_Val_Loire"}
}
Corse <- factor(c("2A","2B"))
for (i in 1:101){
if (is.element(q3[i,1],Corse) == TRUE) {q3[i,15] <- "Corse"}
}
Guadeloupe <- factor(c("971"))
for (i in 1:101){
if (is.element(q3[i,1],Guadeloupe) == TRUE) {q3[i,15] <- "Guadeloupe"}
}
Guyane <- factor(c("973"))
for (i in 1:101){
if (is.element(q3[i,1],Guyane) == TRUE) {q3[i,15] <- "Guyane"}
}
Hauts_de_France <- factor(c("02","59","60","62","80"))
for (i in 1:101){
if (is.element(q3[i,1],Hauts_de_France) == TRUE) {q3[i,15] <- "Hauts_de_France"}
}
IDF <- factor(c("75","77","78","91","92","93","94","95"))
for (i in 1:101){
if (is.element(q3[i,1],IDF) == TRUE) {q3[i,15] <- "IDF"}
}
Réunion <- factor(c("974"))
for (i in 1:101){
if (is.element(q3[i,1],Réunion) == TRUE) {q3[i,15] <- "Réunion"}
}
Martinique <- factor(c("972"))
for (i in 1:101){
if (is.element(q3[i,1],Martinique) == TRUE) {q3[i,15] <- "Martinique"}
}
Mayotte <- factor(c("976"))
for (i in 1:101){
if (is.element(q3[i,1],Mayotte) == TRUE) {q3[i,15] <- "Mayotte"}
}
Normandie <- factor(c("14","27","50","61","76"))
for (i in 1:101){
if (is.element(q3[i,1],Normandie) == TRUE) {q3[i,15] <- "Normandie"}
}
Nouvelle_Aquitaine <- factor(c("16","17","19","23","24","33","40","47","64","79","86","87"))
for (i in 1:101){
if (is.element(q3[i,1],Nouvelle_Aquitaine) == TRUE) {q3[i,15] <- "Nouvelle_Aquitaine"}
}
Occitanie <- factor(c("09","11","12","30","31","32","34","46","48","65","66","81","82"))
for (i in 1:101){
if (is.element(q3[i,1],Occitanie) == TRUE) {q3[i,15] <- "Occitanie"}
}
Pays_de_la_Loire <- factor(c("44","49","53","72","85"))
for (i in 1:101){
if (is.element(q3[i,1],Pays_de_la_Loire) == TRUE) {q3[i,15] <- "Pays_de_la_Loire"}
}
View(q3)
#on représente les hospitalisations par région graphiquement
ggplot(hosp_final) + geom_bar(aes(x=hosp_final$V4, y = hosp_final$x.x), alpha = 0.2, fill = "blue", stat = "identity") + geom_bar(aes(x=hosp_final$V4, y = hosp_final$x.y), alpha = 0.2, fill = "red", stat = "identity") + labs(title="Personnes hospitalisées selon la région",x ="Région", y = "Nombre de personnes", caption = "L'histogramme bleu représente les personnes hospitalisées lors du pic de la première vague et l'histogramme rouge les personnes hospitalisées lors du pic de la deuxième vague", subtitle = "Aux pics des deux vagues") + coord_flip()
colnames(q3)[15] <- "Région"
View(q3)
#on représente les hospitalisations par région graphiquement
ggplot(hosp_final) + geom_bar(aes(x=q3$Région, y = q3$hosp_pic1), alpha = 0.2, fill = "blue", stat = "identity") + geom_bar(aes(x=q3$Région, y = q3$hosp_pic2), alpha = 0.2, fill = "red", stat = "identity") + labs(title="Personnes hospitalisées selon la région",x ="Région", y = "Nombre de personnes", caption = "L'histogramme bleu représente les personnes hospitalisées lors du pic de la première vague et l'histogramme rouge les personnes hospitalisées lors du pic de la deuxième vague", subtitle = "Aux pics des deux vagues") + coord_flip()
#on représente les hospitalisations par région graphiquement
ggplot(q3) + geom_bar(aes(x=q3$Région, y = q3$hosp_pic1), alpha = 0.2, fill = "blue", stat = "identity") + geom_bar(aes(x=q3$Région, y = q3$hosp_pic2), alpha = 0.2, fill = "red", stat = "identity") + labs(title="Personnes hospitalisées selon la région",x ="Région", y = "Nombre de personnes", caption = "L'histogramme bleu représente les personnes hospitalisées lors du pic de la première vague et l'histogramme rouge les personnes hospitalisées lors du pic de la deuxième vague", subtitle = "Aux pics des deux vagues") + coord_flip()
population <- population[5:106,1:8]
View(population)
population <- population[-97,]
population <- population[,-(3:7)] #ces variables ne nous intéressent pas, on garde le cumul
population$...8 <- type.convert(population$...8)
colnames(population)[3] <- "Pop totale"
colnames(population)[1] <- "dep"
View(hospitalisation)
#création de l'indicateur
hospitalisation[9] <- hospitalisation$hosp / population$`Pop totale`
#création de l'indicateur
hospitalisation[9] <- (hospitalisation$hosp / population$`Pop totale`) * 100
knitr::opts_chunk$set(echo = TRUE)
```rmarkdown::render("02_analyses.R")
```rmarkdown::render("02_analyses.R")
ggplot(data = question_1) + geom_line(aes(x = as.Date(question_1$jour), y = question_1$hosp) , col = "red") + geom_line(aes(x = as.Date(question_1$jour), y = question_1$rea), col = "blue") + labs(title="Personnes hospitalisées et en réanimation selon la date",x ="Date", y = "Nombre de personnes", caption = "La courbe en rouge représente les personnes hospitalisées, et la courbe en bleu représente les personnes en réanimation") + geom_vline(xintercept = as.Date("2020-03-18")) + geom_vline(xintercept = as.Date("2020-05-11")) + geom_vline(xintercept = as.Date("2020-10-30"))+ geom_vline(xintercept = as.Date("2020-03-18"))+ geom_vline(xintercept = as.Date("2020-12-15"))
ggplot(data = question_1) + geom_line(aes(x = as.Date(question_1$jour), y = question_1$hosp) , col = "red") + geom_line(aes(x = as.Date(question_1$jour), y = question_1$rea), col = "blue") + labs(title="Personnes hospitalisées et en réanimation selon la date",x ="Date", y = "Nombre de personnes", caption = "La courbe en rouge représente les personnes hospitalisées, et la courbe en bleu représente les personnes en réanimation") + geom_vline(xintercept = as.Date("2020-03-18")) + geom_vline(xintercept = as.Date("2020-05-11")) + geom_vline(xintercept = as.Date("2020-10-30"))+ geom_vline(xintercept = as.Date("2020-03-18"))+ geom_vline(xintercept = as.Date("2020-12-15"))
ggplot(data = question_1) + geom_line(aes(x = as.Date(question_1$jour), y = question_1$hosp) , col = "red") + geom_line(aes(x = as.Date(question_1$jour), y = question_1$rea), col = "blue") + labs(title="Personnes hospitalisées et en réanimation selon la date",x ="Date", y = "Nombre de personnes", caption = "La courbe en rouge représente les personnes hospitalisées, et la courbe en bleu représente les personnes en réanimation") + geom_vline(xintercept = as.Date("2020-03-18")) + geom_vline(xintercept = as.Date("2020-05-11")) + geom_vline(xintercept = as.Date("2020-10-30"))+ geom_vline(xintercept = as.Date("2020-03-18"))+ geom_vline(xintercept = as.Date("2020-12-15"))
ggplot(data = question_1) + geom_line(aes(x = as.Date(question_1$jour), y = question_1$hosp) , col = "red") + geom_line(aes(x = as.Date(question_1$jour), y = question_1$rea), col = "blue") + labs(title="Personnes hospitalisées et en réanimation selon la date",x ="Date", y = "Nombre de personnes", caption = "La courbe en rouge représente les personnes hospitalisées, et la courbe en bleu représente les personnes en réanimation") + geom_vline(xintercept = as.Date("2020-03-18")) + geom_vline(xintercept = as.Date("2020-05-11")) + geom_vline(xintercept = as.Date("2020-10-30"))+ geom_vline(xintercept = as.Date("2020-03-18"))+ geom_vline(xintercept = as.Date("2020-12-15"))
ggplot(data = question_1) + geom_line(aes(x = as.Date(question_1$jour), y = question_1$hosp) , col = "red") + geom_line(aes(x = as.Date(question_1$jour), y = question_1$rea), col = "blue") + labs(title="Personnes hospitalisées et en réanimation selon la date",x ="Date", y = "Nombre de personnes", caption = "La courbe en rouge représente les personnes hospitalisées, et la courbe en bleu représente les personnes en réanimation") + geom_vline(xintercept = as.Date("2020-03-18")) + geom_vline(xintercept = as.Date("2020-05-11")) + geom_vline(xintercept = as.Date("2020-10-30"))+ geom_vline(xintercept = as.Date("2020-03-18"))+ geom_vline(xintercept = as.Date("2020-12-15"))
ggplot(data = question_1) + geom_line(aes(x = as.Date(question_1$jour), y = question_1$hosp) , col = "red") + geom_line(aes(x = as.Date(question_1$jour), y = question_1$rea), col = "blue") + labs(title="Personnes hospitalisées et en réanimation selon la date",x ="Date", y = "Nombre de personnes", caption = "La courbe en rouge représente les personnes hospitalisées, et la courbe en bleu représente les personnes en réanimation") + geom_vline(xintercept = as.Date("2020-03-18")) + geom_vline(xintercept = as.Date("2020-05-11")) + geom_vline(xintercept = as.Date("2020-10-30"))+ geom_vline(xintercept = as.Date("2020-03-18"))+ geom_vline(xintercept = as.Date("2020-12-15"))
knitr::opts_chunk$set(echo = FALSE)
ggplot(data = question_1) + geom_line(aes(x = as.Date(question_1$jour), y = question_1$hosp) , col = "red") + geom_line(aes(x = as.Date(question_1$jour), y = question_1$rea), col = "blue") + labs(title="Personnes hospitalisées et en réanimation selon la date",x ="Date", y = "Nombre de personnes", caption = "La courbe en rouge représente les personnes hospitalisées, et la courbe en bleu représente les personnes en réanimation") + geom_vline(xintercept = as.Date("2020-03-18")) + geom_vline(xintercept = as.Date("2020-05-11")) + geom_vline(xintercept = as.Date("2020-10-30"))+ geom_vline(xintercept = as.Date("2020-03-18"))+ geom_vline(xintercept = as.Date("2020-12-15"))
knitr::opts_chunk$set(echo = FALSE)
ggplot(data = question_1) + geom_line(aes(x = as.Date(question_1$jour), y = question_1$hosp) , col = "red") + geom_line(aes(x = as.Date(question_1$jour), y = question_1$rea), col = "blue") + labs(title="Personnes hospitalisées et en réanimation selon la date",x ="Date", y = "Nombre de personnes", caption = "La courbe en rouge représente les personnes hospitalisées, et la courbe en bleu représente les personnes en réanimation") + geom_vline(xintercept = as.Date("2020-03-18")) + geom_vline(xintercept = as.Date("2020-05-11")) + geom_vline(xintercept = as.Date("2020-10-30"))+ geom_vline(xintercept = as.Date("2020-03-18"))+ geom_vline(xintercept = as.Date("2020-12-15"))
```{r setup, echo=FALSE}
```{r setup, echo=FALSE}
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(echo = TRUE)
render("02_analyses.R",
output_format = NULL,
output_file = NULL,
output_dir = NULL,
output_options = NULL,
output_yaml = NULL,
intermediates_dir = NULL,
knit_root_dir = NUL)
View(hospitalisation)
hosp = aggregate(hospitalisation$hosp,by=list(hospitalisation$jour), FUN=sum)
reanim = aggregate(hospitalisation$rea,by=list(hospitalisation$jour), FUN=sum)
question_1 <- merge(hosp, reanim, by = "Group.1")
colnames(question_1)[1] <- "jour"
colnames(question_1)[2] <- "hosp"
colnames(question_1)[3] <- "rea"
knitr::opts_chunk$set(echo = FALSE)
ggplot(data = question_1) + geom_line(aes(x = as.Date(question_1$jour), y = question_1$hosp) , col = "red") + geom_line(aes(x = as.Date(question_1$jour), y = question_1$rea), col = "blue") + labs(title="Personnes hospitalisées et en réanimation selon la date",x ="Date", y = "Nombre de personnes", caption = "La courbe en rouge représente les personnes hospitalisées, et la courbe en bleu représente les personnes en réanimation") + geom_vline(xintercept = as.Date("2020-03-18")) + geom_vline(xintercept = as.Date("2020-05-11")) + geom_vline(xintercept = as.Date("2020-10-30"))+ geom_vline(xintercept = as.Date("2020-03-18"))+ geom_vline(xintercept = as.Date("2020-12-15"))
hosp = aggregate(hospitalisation$hosp,by=list(hospitalisation$jour), FUN=sum)
reanim = aggregate(hospitalisation$rea,by=list(hospitalisation$jour), FUN=sum)
question_1 <- merge(hosp, reanim, by = "Group.1")
colnames(question_1)[1] <- "jour"
colnames(question_1)[2] <- "hosp"
colnames(question_1)[3] <- "rea"
knitr::opts_chunk$set(echo = FALSE)
ggplot(data = question_1) + geom_line(aes(x = as.Date(question_1$jour), y = question_1$hosp) , col = "red") + geom_line(aes(x = as.Date(question_1$jour), y = question_1$rea), col = "blue") + labs(title="Personnes hospitalisées et en réanimation selon la date",x ="Date", y = "Nombre de personnes", caption = "La courbe en rouge représente les personnes hospitalisées, et la courbe en bleu représente les personnes en réanimation") + geom_vline(xintercept = as.Date("2020-03-18")) + geom_vline(xintercept = as.Date("2020-05-11")) + geom_vline(xintercept = as.Date("2020-10-30"))+ geom_vline(xintercept = as.Date("2020-03-18"))+ geom_vline(xintercept = as.Date("2020-12-15"))
hosp = aggregate(hospitalisation$hosp,by=list(hospitalisation$jour), FUN=sum)
reanim = aggregate(hospitalisation$rea,by=list(hospitalisation$jour), FUN=sum)
question_1 <- merge(hosp, reanim, by = "Group.1")
colnames(question_1)[1] <- "jour"
colnames(question_1)[2] <- "hosp"
colnames(question_1)[3] <- "rea"
knitr::opts_chunk$set(echo = FALSE)
ggplot(data = question_1) + geom_line(aes(x = as.Date(question_1$jour), y = question_1$hosp) , col = "red") + geom_line(aes(x = as.Date(question_1$jour), y = question_1$rea), col = "blue") + labs(title="Personnes hospitalisées et en réanimation selon la date",x ="Date", y = "Nombre de personnes", caption = "La courbe en rouge représente les personnes hospitalisées, et la courbe en bleu représente les personnes en réanimation") + geom_vline(xintercept = as.Date("2020-03-18")) + geom_vline(xintercept = as.Date("2020-05-11")) + geom_vline(xintercept = as.Date("2020-10-30"))+ geom_vline(xintercept = as.Date("2020-03-18"))+ geom_vline(xintercept = as.Date("2020-12-15"))
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(echo = TRUE)
hosp = aggregate(hospitalisation$hosp,by=list(hospitalisation$jour), FUN=sum)
reanim = aggregate(hospitalisation$rea,by=list(hospitalisation$jour), FUN=sum)
question_1 <- merge(hosp, reanim, by = "Group.1")
colnames(question_1)[1] <- "jour"
colnames(question_1)[2] <- "hosp"
colnames(question_1)[3] <- "rea"
knitr::opts_chunk$set(echo = FALSE)
ggplot(data = question_1) + geom_line(aes(x = as.Date(question_1$jour), y = question_1$hosp) , col = "red") + geom_line(aes(x = as.Date(question_1$jour), y = question_1$rea), col = "blue") + labs(title="Personnes hospitalisées et en réanimation selon la date",x ="Date", y = "Nombre de personnes", caption = "La courbe en rouge représente les personnes hospitalisées, et la courbe en bleu représente les personnes en réanimation") + geom_vline(xintercept = as.Date("2020-03-18")) + geom_vline(xintercept = as.Date("2020-05-11")) + geom_vline(xintercept = as.Date("2020-10-30"))+ geom_vline(xintercept = as.Date("2020-03-18"))+ geom_vline(xintercept = as.Date("2020-12-15"))
hosp = aggregate(hospitalisation$hosp,by=list(hospitalisation$jour), FUN=sum)
reanim = aggregate(hospitalisation$rea,by=list(hospitalisation$jour), FUN=sum)
hosp = aggregate(hospitalisation$hosp,by=list(hospitalisation$jour), FUN=sum)
reanim = aggregate(hospitalisation$rea,by=list(hospitalisation$jour), FUN=sum)
knitr::opts_chunk$set(echo = TRUE)
question_1 <- merge(hosp, reanim, by = "Group.1")
colnames(question_1)[1] <- "jour"
colnames(question_1)[2] <- "hosp"
colnames(question_1)[3] <- "rea"
question_1 <- merge(hosp, reanim, by = "Group.1")
colnames(question_1)[1] <- "jour"
colnames(question_1)[2] <- "hosp"
colnames(question_1)[3] <- "rea"
question_1 <- merge(hosp, reanim, by = "Group.1")
colnames(question_1)[1] <- "jour"
colnames(question_1)[2] <- "hosp"
colnames(question_1)[3] <- "rea"
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(echo = FALSE)
ggplot(data = question_1) + geom_line(aes(x = as.Date(question_1$jour), y = question_1$hosp) , col = "red") + geom_line(aes(x = as.Date(question_1$jour), y = question_1$rea), col = "blue") + labs(title="Personnes hospitalisées et en réanimation selon la date",x ="Date", y = "Nombre de personnes", caption = "La courbe en rouge représente les personnes hospitalisées, et la courbe en bleu représente les personnes en réanimation") + geom_vline(xintercept = as.Date("2020-03-18")) + geom_vline(xintercept = as.Date("2020-05-11")) + geom_vline(xintercept = as.Date("2020-10-30"))+ geom_vline(xintercept = as.Date("2020-03-18"))+ geom_vline(xintercept = as.Date("2020-12-15"))
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(echo = FALSE)
ggplot(data = question_1) + geom_line(aes(x = as.Date(question_1$jour), y = question_1$hosp) , col = "red") + geom_line(aes(x = as.Date(question_1$jour), y = question_1$rea), col = "blue") + labs(title="Personnes hospitalisées et en réanimation selon la date",x ="Date", y = "Nombre de personnes", caption = "La courbe en rouge représente les personnes hospitalisées, et la courbe en bleu représente les personnes en réanimation") + geom_vline(xintercept = as.Date("2020-03-18")) + geom_vline(xintercept = as.Date("2020-05-11")) + geom_vline(xintercept = as.Date("2020-10-30"))+ geom_vline(xintercept = as.Date("2020-03-18"))+ geom_vline(xintercept = as.Date("2020-12-15"))+ geom_vline(xintercept = as.Date("2020-11-16"), col = "red") + geom_vline(xintercept = as.Date("2020-04-14"), col = "red")
#le maximum global correspond à la ligne 244
question_1[244,]
#il correspond à la ligne 28
q1_bis[28,]
knitr::opts_chunk$set(echo = TRUE)
question_1[,4] <- (question_1$rea / question_1$hosp) * 100
vague1 <- subset(age, age$jour == "2020-04-14")
vague1 <- aggregate(vague1$hosp,by=list(vague1$cl_age90), FUN=sum)
vague1 <- vague1[-1,] #c'est le total
vague1$Group.1 <- factor(vague1$Group.1)
vague2 <- subset(age, age$jour == "2020-11-16")
vague2 <- aggregate(vague2$hosp,by=list(vague2$cl_age90), FUN=sum)
vague2 <- vague2[-1,]
vague2$Group.1 <- factor(vague2$Group.1)
classe_age <- merge(vague1, vague2, by = "Group.1")
colnames(classe_age)[1] <- "classe"
colnames(classe_age)[2] <- "pic 1"
colnames(classe_age)[3] <- "pic 2"
classe_age <- classe_age[order(classe_age[,1]), ]
ggplot(classe_age) + geom_bar(aes(x=classe_age$classe, y = classe_age$`pic 1`), alpha = 0.2, fill = "blue", stat = "identity") + geom_bar(aes(x=classe_age$classe, y = classe_age$`pic 2`), alpha = 0.2, fill = "red", stat = "identity") + labs(title="Personnes hospitalisées selon la classe d'âge",x ="Classe d'âge", y = "Nombre de personnes", caption = "L'histogramme bleu représente les personnes hospitalisées lors du pic de la première vague et l'histogramme rouge les personnes hospitalisées lors du pic de la deuxième vague")
ggplot(classe_age) + geom_bar(aes(x=classe_age$classe, y = classe_age$`pic 1`), alpha = 0.2, fill = "blue", stat = "identity") + geom_bar(aes(x=classe_age$classe, y = classe_age$`pic 2`), alpha = 0.2, fill = "red", stat = "identity") + labs(title="Personnes hospitalisées selon la classe d'âge",x ="Classe d'âge", y = "Nombre de personnes", caption = "L'histogramme bleu représente les personnes hospitalisées lors du pic de la première vague et l'histogramme rouge les personnes hospitalisées lors du pic de la deuxième vague")
ggplot(classe_age) + geom_bar(aes(x=classe_age$classe, y = classe_age$`pic 1`), alpha = 0.2, fill = "blue", stat = "identity") + geom_bar(aes(x=classe_age$classe, y = classe_age$`pic 2`), alpha = 0.2, fill = "red", stat = "identity") + labs(title="Personnes hospitalisées selon la classe d'âge",x ="Classe d'âge", y = "Nombre de personnes", caption = "L'histogramme bleu représente les personnes hospitalisées lors du pic de la première vague et l'histogramme rouge les personnes hospitalisées lors du pic de la deuxième vague")
ggplot(classe_age) + geom_bar(aes(x=classe_age$classe, y = classe_age$`pic 1`), alpha = 0.2, fill = "blue", stat = "identity") + geom_bar(aes(x=classe_age$classe, y = classe_age$`pic 2`), alpha = 0.2, fill = "red", stat = "identity") + labs(title="Personnes hospitalisées selon la classe d'âge",x ="Classe d'âge", y = "Nombre de personnes", caption = "L'histogramme bleu représente les personnes hospitalisées lors du pic de la première vague et l'histogramme rouge les personnes hospitalisées lors du pic de la deuxième vague")
ggplot(classe_age) + geom_bar(aes(x=classe_age$classe, y = classe_age$`pic 1`), alpha = 0.2, fill = "blue", stat = "identity") + geom_bar(aes(x=classe_age$classe, y = classe_age$`pic 2`), alpha = 0.2, fill = "red", stat = "identity") + labs(title="Personnes hospitalisées selon la classe d'âge",x ="Classe d'âge", y = "Nombre de personnes", caption = "L'histogramme bleu représente les personnes hospitalisées lors du pic de la première vague et l'histogramme rouge les personnes hospitalisées lors du pic de la deuxième vague")
vague1 <- subset(age, age$jour == "2020-04-14")
vague1 <- aggregate(vague1$hosp,by=list(vague1$cl_age90), FUN=sum)
vague1 <- vague1[-1,] #c'est le total
vague1$Group.1 <- factor(vague1$Group.1)
vague2 <- subset(age, age$jour == "2020-11-16")
vague2 <- aggregate(vague2$hosp,by=list(vague2$cl_age90), FUN=sum)
vague2 <- vague2[-1,]
vague2$Group.1 <- factor(vague2$Group.1)
classe_age <- merge(vague1, vague2, by = "Group.1")
colnames(classe_age)[1] <- "classe"
colnames(classe_age)[2] <- "pic 1"
colnames(classe_age)[3] <- "pic 2"
classe_age <- classe_age[order(classe_age[,1]), ]
ggplot(classe_age) + geom_bar(aes(x=classe_age$classe, y = classe_age$`pic 1`), alpha = 0.2, fill = "blue", stat = "identity") + geom_bar(aes(x=classe_age$classe, y = classe_age$`pic 2`), alpha = 0.2, fill = "red", stat = "identity") + labs(title="Personnes hospitalisées selon la classe d'âge",x ="Classe d'âge", y = "Nombre de personnes", caption = "L'histogramme bleu représente les personnes hospitalisées lors du pic de la première vague et l'histogramme rouge les personnes hospitalisées lors du pic de la deuxième vague")
knitr::opts_chunk$set(echo = TRUE)
vague1 <- subset(age, age$jour == "2020-04-14")
vague1 <- aggregate(vague1$hosp,by=list(vague1$cl_age90), FUN=sum)
vague1 <- vague1[-1,] #c'est le total
vague1$Group.1 <- factor(vague1$Group.1)
vague2 <- subset(age, age$jour == "2020-11-16")
vague2 <- aggregate(vague2$hosp,by=list(vague2$cl_age90), FUN=sum)
vague2 <- vague2[-1,]
vague2$Group.1 <- factor(vague2$Group.1)
classe_age <- merge(vague1, vague2, by = "Group.1")
colnames(classe_age)[1] <- "classe"
colnames(classe_age)[2] <- "pic 1"
colnames(classe_age)[3] <- "pic 2"
classe_age <- classe_age[order(classe_age[,1]), ]
vague1 <- subset(age, age$jour == "2020-04-14")
vague1 <- aggregate(vague1$hosp,by=list(vague1$cl_age90), FUN=sum)
vague1 <- vague1[-1,] #c'est le total
vague1$Group.1 <- factor(vague1$Group.1)
vague2 <- subset(age, age$jour == "2020-11-16")
vague2 <- aggregate(vague2$hosp,by=list(vague2$cl_age90), FUN=sum)
vague2 <- vague2[-1,]
vague2$Group.1 <- factor(vague2$Group.1)
classe_age <- merge(vague1, vague2, by = "Group.1")
colnames(classe_age)[1] <- "classe"
colnames(classe_age)[2] <- "pic 1"
colnames(classe_age)[3] <- "pic 2"
classe_age <- classe_age[order(classe_age[,1]), ]
ggplot(classe_age) + geom_bar(aes(x=classe_age$classe, y = classe_age$`pic 1`), alpha = 0.2, fill = "blue", stat = "identity") + geom_bar(aes(x=classe_age$classe, y = classe_age$`pic 2`), alpha = 0.2, fill = "red", stat = "identity") + labs(title="Personnes hospitalisées selon la classe d'âge",x ="Classe d'âge", y = "Nombre de personnes", caption = "L'histogramme bleu représente les personnes hospitalisées lors du pic de la première vague et l'histogramme rouge les personnes hospitalisées lors du pic de la deuxième vague")
knitr::opts_chunk$set(echo = TRUE)
v1 <- subset(age, age$jour == "2020-04-14")
v1 <- aggregate(v1$rea,by=list(v1$cl_age90), FUN=sum)
v1 <- v1[-1,] #c'est le total
v1$Group.1 <- factor(v1$Group.1)
v2 <- subset(age, age$jour == "2020-11-16")
v2 <- aggregate(v2$rea,by=list(v2$cl_age90), FUN=sum)
v2 <- v2[-1,]
v2$Group.1 <- factor(v2$Group.1)
rea_age <- merge(v1, v2, by = "Group.1")
colnames(rea_age)[1] <- "classe"
colnames(rea_age)[2] <- "pic 1"
colnames(rea_age)[3] <- "pic 2"
rea_age <- rea_age[order(rea_age[,1]), ]
knitr::opts_chunk$set(echo = TRUE)
ggplot(rea_age) + geom_bar(aes(x=rea_age$classe, y = rea_age$`pic 1`), alpha = 0.2, fill = "blue", stat = "identity") + geom_bar(aes(x=classe_age$classe, y = rea_age$`pic 2`), alpha = 0.2, fill = "red", stat = "identity") + labs(title="Personnes hospitalisées selon la classe d'âge",x ="Classe d'âge", y = "Nombre de personnes", caption = "L'histogramme bleu représente les personnes hospitalisées lors du pic de la première vague et l'histogramme rouge les personnes hospitalisées lors du pic de la deuxième vague")
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(echo = TRUE)
#on représente ces résultats graphiquement
ggplot(classe_age) + geom_bar(aes(x=classe_age$classe, y = classe_age$`pic 1`), alpha = 0.2, fill = "blue", stat = "identity") + geom_bar(aes(x=classe_age$classe, y = classe_age$`pic 2`), alpha = 0.2, fill = "red", stat = "identity") + labs(title="Personnes hospitalisées selon la classe d'âge",x ="Classe d'âge", y = "Nombre de personnes", caption = "L'histogramme bleu représente les personnes hospitalisées lors du pic de la première vague et l'histogramme rouge les personnes hospitalisées lors du pic de la deuxième vague")
library(zoo)
library(tseries)
#install.packages("fUnitRoots")
library(fUnitRoots)
path="C:\Users\Sophie\Documents\ENSAE\2A\S2\Séries temp"
path="\Users\Sophie\Documents\ENSAE\2A\S2\Séries temp"
path="C:\Users\Sophie\Desktop\Projet ST"
path="C:/Users/Sophie/Desktop/Projet ST"
setwd(path)
getwd()
list.files()
data=read.csv(file = "https://www.insee.fr/fr/statistiques/serie/010537238", sep = ";")
str(data)
View(data)
list.files()
data=read.csv("valeurs_mensuelles.csv", sep = ";")
str(data)
View(data)
data$spread=zoo(data$spread,order.by=data$dates)
data.colnames(1) = "date"
data <- colnames(c("date","IBPI","Code"))
list.files()
data=read.csv("valeurs_mensuelles.csv", sep = ";")
str(data)
colnames(date)[1] <- "date"
colnames(data)[1] <- "date"
View(data)
colnames(data)[1] <- "date"
colnames(data)[2] <- "IBPI"
colnames(data)[3] <- "classe"
colnames(data)[1] <- "date"
colnames(data)[2] <- "IBPI"
colnames(data)[3] <- "classe"
data = data[-(1:2),]
data$spread=zoo(data$spread,order.by=data$date)
data$IBPI=zoo(data$IBPI,order.by=data$date)
str(data$IBPI)
plot(data$IBPI,type="b",pch=4)
?diff
data$DIBPI=zoo(c(NA,diff(data$IBPI,1)),order.by=data$IBPI)
str(data$DIBPI)
plot(data$DIBPI[2:nrow(data)],type="l",xlab="Dates",ylab="Diff IBPI",xaxt='n')
?diff
data$DIBPI=zoo(c(NA,diff(data$IBPI,1)),order.by=data$IBPI)
str(data$DIBPI)
plot(data$DIBPI[2:nrow(data),],type="l",xlab="Dates",ylab="Diff IBPI",xaxt='n')
?diff
data$DIBPI=zoo(c(NA,diff(data$IBPI,1)),order.by=data$IBPI)
str(data$DIBPI)
#plot(data$DIBPI[2:nrow(data)],type="l",xlab="Dates",ylab="Diff #IBPI",xaxt='n')
#axis(side=1,abscisse)
?diff
data$DIBPI=zoo(c(NA,diff(data$IBPI,1)),order.by=data$date)
str(data$DIBPI)
#plot(data$DIBPI[2:nrow(data)],type="l",xlab="Dates",ylab="Diff #IBPI",xaxt='n')
#axis(side=1,abscisse)
?diff
data$DIBPI=zoo(data$IBPI,order.by=data$date)
str(data$DIBPI)
#plot(data$DIBPI[2:nrow(data)],type="l",xlab="Dates",ylab="Diff #IBPI",xaxt='n')
#axis(side=1,abscisse)
?diff
data$DIBPI=zoo(diff(data$IBPI,1),order.by=data$date)
str(data$DIBPI)
#plot(data$DIBPI[2:nrow(data)],type="l",xlab="Dates",ylab="Diff #IBPI",xaxt='n')
#axis(side=1,abscisse)
data$DIBPI=zoo(c(NA,diff(data$IBPI,1)),order.by=data$date)
str(data$DIBPI)
#plot(data$DIBPI[2:nrow(data)],type="l",xlab="Dates",ylab="Diff #IBPI",xaxt='n')
#axis(side=1,abscisse)
data$DIBPI=zoo(c(NA,diff(data$IBPI)),order.by=data$date)
str(data$DIBPI)
?diff
#plot(data$DIBPI[2:nrow(data)],type="l",xlab="Dates",ylab="Diff #IBPI",xaxt='n')
#axis(side=1,abscisse)
a = c(NA,diff(data$IBPI,1))
a = c(diff(data$IBPI,1))
a = zoo(c(diff(data$IBPI,1)))
a = zoo(c(diff(data$IBPI,1)))
a = data$IBPI
diff(data$IBPI,1)
a = diff(data$IBPI,1)
a = zoo(diff(data$IBPI,1),order.by=data$date)
a
a = zoo(c(0,diff(data$IBPI,1)),order.by=data$date)
a
a = zoo(c(diff(data$IBPI,1)),order.by=data$date)
a = zoo(c(diff(data$IBPI,1),0),order.by=data$date)
a
a = zoo(c(diff(data$IBPI,1),difference=1),order.by=data$date)
a
a = zoo(c(diff(data$IBPI,1),differences=1),order.by=data$date)
a
a = zoo(c(diff(data$IBPI,differences=1)),order.by=data$date)
a
a = zoo(c(diff(data$IBPI,lag=1)),order.by=data$date)
a
a = zoo(c(diff(data$IBPI)),order.by=data$date)
a
a = zoo(diff(data$IBPI),order.by=data$date)
a
a = diff(data$IBPI)
a
type(data$IBPI)
class(data$IBPI)
data$DIBPI=(c(NA,diff(data$IBPI,1)),order.by=data$date)
data$DIBPI=(c(NA,diff(data$IBPI,1)))
str(data$DIBPI)
?diff
#plot(data$DIBPI[2:nrow(data)],type="l",xlab="Dates",ylab="Diff #IBPI",xaxt='n')
#axis(side=1,abscisse)
apply(lag(zoo(data$IBPI), c(-1,0), na.pad = TRUE), 1L, diff)
#data$DIBPI=zoo(c(NA,diff(data$IBPI,1)),order.by=data$date)
require(zoo)
apply(lag(zoo(data$IBPI), c(-1,0), na.pad = FALSE), 1L, diff)
#str(data$DIBPI)
#?diff
#plot(data$DIBPI[2:nrow(data)],type="l",xlab="Dates",ylab="Diff #IBPI",xaxt='n')
#axis(side=1,abscisse)
str(a)
a = diff(data$IBPI)
a = diff(data[,2])
data$IBPI
diff(data$IBPI)
class(data$IBPI)
diff(data$IBPI,1)
diff(data$IBPI,2)
plot(data$IBPI,type="a",pch=4)
plot(data$IBPI,type="b",pch=4)
```{r}
zoo(c(NA,diff(data$IBPI)),order.by=data$date)
a = c(2,4,0,1)
diff(a)
a = c(2,4,0,1)
class(a)
a = as.numeric(data$IBPI)
data$DIBPI=zoo(c(NA,diff(a,1)),order.by=data$date)
data = data(data,order.by=data$date)
data <- data[order(date),]
data <- data[order(data$date),]
data <- data[order(date)]
data <- data[order(date),]
list.files()
dta=read.csv("valeurs_mensuelles.csv", sep = ";")
str(dta)
colnames(dta)[1] <- "date"
colnames(dta)[2] <- "IBPI"
colnames(dta)[3] <- "classe"
dta = dta[-(1:2),]
dta <- dta[order(dta$date),]
dta$IBPI=zoo(dta$IBPI,order.by=dta$date)
str(dta$IBPI)
View(dta)
plot(dta$IBPI,type="b",pch=4)
dta$DIBPI=zoo(c(NA,diff(dta$IBPI,1)),order.by=data$date)
dta$DIBPI=zoo(c(NA,diff(dta$IBPI,1)),order.by=dta$date)
a = as.numeric(dta$IBPI)
dta$DIBPI=zoo(c(NA,diff(a,1)),order.by=dta$date)
class(dta$DIBPI)
plot(dta$DIBPI[2:nrow(data)],type="l",xlab="Dates",ylab="Diff IBPI",xaxt='n')
plot(dta$DIBPI[2:nrow(dta)],type="l",xlab="Dates",ylab="Diff IBPI",xaxt='n')
axis(side=1,abscisse)
plot(dta$DIBPI[2:nrow(dta)],type="l",xlab="Dates",ylab="Diff IBPI",xaxt='n')
